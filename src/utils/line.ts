import crypto from 'crypto';
import { LineMessage, RichMenuConfig } from '@/types/line';

const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;
const LINE_CHANNEL_SECRET = process.env.LINE_CHANNEL_SECRET;

export class LineAPI {
  private static instance: LineAPI;
  private accessToken: string;

  private constructor() {
    if (!LINE_CHANNEL_ACCESS_TOKEN) {
      throw new Error('LINE_CHANNEL_ACCESS_TOKEN is not configured');
    }
    this.accessToken = LINE_CHANNEL_ACCESS_TOKEN;
  }

  public static getInstance(): LineAPI {
    if (!LineAPI.instance) {
      LineAPI.instance = new LineAPI();
    }
    return LineAPI.instance;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö webhook signature
  public verifySignature(body: string, signature: string): boolean {
    if (!LINE_CHANNEL_SECRET) {
      console.error('LINE_CHANNEL_SECRET is not configured');
      return false;
    }

    const hash = crypto
      .createHmac('SHA256', LINE_CHANNEL_SECRET)
      .update(body)
      .digest('base64');

    return hash === signature;
  }

  // ‡∏™‡πà‡∏á reply message
  public async replyMessage(replyToken: string, messages: LineMessage[]): Promise<boolean> {
    try {
      const response = await fetch('https://api.line.me/v2/bot/message/reply', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          replyToken,
          messages
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error sending reply message:', error);
      return false;
    }
  }

  // ‡∏™‡πà‡∏á push message
  public async pushMessage(userId: string, messages: LineMessage[]): Promise<boolean> {
    try {
      const response = await fetch('https://api.line.me/v2/bot/message/push', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          to: userId,
          messages
        })
      });

      return response.ok;
    } catch (error) {
      console.error('Error sending push message:', error);
      return false;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu
  public async createRichMenu(menuConfig: RichMenuConfig): Promise<string | null> {
    try {
      const response = await fetch('https://api.line.me/v2/bot/richmenu', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(menuConfig)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('Failed to create rich menu:', errorText);
        return null;
      }

      const result = await response.json();
      return result.richMenuId;
    } catch (error) {
      console.error('Error creating rich menu:', error);
      return null;
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Rich Menu
  public async uploadRichMenuImage(richMenuId: string, imageBuffer: ArrayBuffer): Promise<boolean> {
    try {
      const response = await fetch(`https://api-data.line.me/v2/bot/richmenu/${richMenuId}/content`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`,
          'Content-Type': 'image/jpeg'
        },
        body: imageBuffer
      });

      return response.ok;
    } catch (error) {
      console.error('Error uploading rich menu image:', error);
      return false;
    }
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Rich Menu ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  public async setUserRichMenu(userId: string, richMenuId: string): Promise<boolean> {
    try {
      const response = await fetch(`https://api.line.me/v2/bot/user/${userId}/richmenu/${richMenuId}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`
        }
      });

      return response.ok;
    } catch (error) {
      console.error('Error setting user rich menu:', error);
      return false;
    }
  }

  // ‡∏•‡∏ö Rich Menu ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  public async unlinkUserRichMenu(userId: string): Promise<boolean> {
    try {
      const response = await fetch(`https://api.line.me/v2/bot/user/${userId}/richmenu`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`
        }
      });

      return response.ok;
    } catch (error) {
      console.error('Error unlinking user rich menu:', error);
      return false;
    }
  }

  // ‡∏•‡∏ö Rich Menu
  public async deleteRichMenu(richMenuId: string): Promise<boolean> {
    try {
      const response = await fetch(`https://api.line.me/v2/bot/richmenu/${richMenuId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${this.accessToken}`
        }
      });

      return response.ok;
    } catch (error) {
      console.error('Error deleting rich menu:', error);
      return false;
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Rich Menu ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  public async getRichMenuList(): Promise<any[]> {
    try {
      const response = await fetch('https://api.line.me/v2/bot/richmenu/list', {
        headers: {
          'Authorization': `Bearer ${this.accessToken}`
        }
      });

      if (!response.ok) {
        return [];
      }

      const result = await response.json();
      return result.richmenus || [];
    } catch (error) {
      console.error('Error fetching rich menu list:', error);
      return [];
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  public async getUserProfile(userId: string): Promise<any | null> {
    try {
      const response = await fetch(`https://api.line.me/v2/bot/profile/${userId}`, {
        headers: {
          'Authorization': `Bearer ${this.accessToken}`
        }
      });

      if (!response.ok) {
        return null;
      }

      return await response.json();
    } catch (error) {
      console.error('Error fetching user profile:', error);
      return null;
    }
  }
}

// Rich Menu Templates
export class RichMenuTemplates {
  private static LIFF_ID_CATEGORIES = process.env.LIFF_ID_CATEGORIES;
  private static LIFF_ID_REGISTER = process.env.LIFF_ID_REGISTER;
  private static LIFF_ID_ORDERS = process.env.LIFF_ID_ORDERS;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  public static createUnregisteredMenu(): RichMenuConfig {
    return {
      size: {
        width: 2500,
        height: 1686
      },
      selected: false,
      name: "Unregistered Menu",
      chatBarText: "‡πÄ‡∏°‡∏ô‡∏π",
      areas: [
        {
          bounds: {
            x: 0,
            y: 0,
            width: 1250,
            height: 1686
          },
          action: {
            type: "uri",
            uri: `https://liff.line.me/${this.LIFF_ID_CATEGORIES}`
          }
        },
        {
          bounds: {
            x: 1250,
            y: 0,
            width: 1250,
            height: 1686
          },
          action: {
            type: "uri",
            uri: `https://liff.line.me/${this.LIFF_ID_REGISTER}`
          }
        }
      ]
    };
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rich Menu ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  public static createRegisteredMenu(): RichMenuConfig {
    return {
      size: {
        width: 2500,
        height: 1686
      },
      selected: false,
      name: "Registered Menu",
      chatBarText: "‡πÄ‡∏°‡∏ô‡∏π",
      areas: [
        {
          bounds: {
            x: 0,
            y: 0,
            width: 1250,
            height: 1686
          },
          action: {
            type: "uri",
            uri: `https://liff.line.me/${this.LIFF_ID_CATEGORIES}`
          }
        },
        {
          bounds: {
            x: 1250,
            y: 0,
            width: 1250,
            height: 1686
          },
          action: {
            type: "uri",
            uri: `https://liff.line.me/${this.LIFF_ID_ORDERS}`
          }
        }
      ]
    };
  }
}

// Message Templates
export class MessageTemplates {
  public static welcomeMessage(): LineMessage {
    return {
      type: 'text',
      text: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏Ñ‡∏£‡∏á‡∏ä‡∏ì‡∏™‡∏µ‡∏ä! üè•\n\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏≤ ‡πÄ‡∏ß‡∏ä‡∏†‡∏±‡∏ì‡∏ë‡πå ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô\n‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©'
    };
  }

  public static registrationSuccessMessage(): LineMessage {
    return {
      type: 'text',
      text: 'üéâ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!\n\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏ß‡πà‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡πÉ‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏≤" ‡πÅ‡∏•‡πâ‡∏ß ‚ú®'
    };
  }

  public static pleaseRegisterMessage(): LineMessage {
    return {
      type: 'text',
      text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏¢‡∏≤\n\n‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô" ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞'
    };
  }

  public static generalHelpMessage(): LineMessage {
    return {
      type: 'text',
      text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö'
    };
  }
}

export default LineAPI;